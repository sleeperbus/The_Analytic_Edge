setwd("~/Dev/The_Analytic_Edge/Unit6")
stocks = read.csv("StocksCluster.csv")
str(stocks)
table(stocks$PositiveDec)
6324/nrow(stocks)
cor(stocks)
summary(stocks)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio=0.7)
stockTrain = subset(stocks, spl==T)
stockTest = subset(stocks, spl==F)
modLog= glm(PositiveDec ~ ., data=stockTrain, family=binomial)
summary(modLog)
predTrainLog= predict(modLog, type="response")
tableTrainLog= table(stockTrain$PositiveDec, predTrainLog> 0.5)
sum(diag(1,2)*tableTrainLog)/sum(tableTrainLog)
predTestLog = predict(modLog, newdata=stockTest, type="response")
tableTestLog = table(stockTest$PositiveDec, predTestLog > 0.5)
sum(diag(1,2)*tableTestLog)/sum(tableTestLog)
table(stocks$PositiveDec)
6324/nrow(stocks)
table(stockTest$PositiveDec)
1897/nrow(stockTest)
limitedTrain = stockTrain
limitedTrain$PositiveDec = NULL
limitedTest = stockTest
limitedTest$PositiveDec = NULL
install.packages("caret")
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
?preProcess
summary(normTrain)
limitedTrain = stockTrain
limitedTrain$PositiveDec = NULL
limitedTest = stockTest
limitedTest$PositiveDec = NULL
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
summary(normTrain)
mean(normTrain$ReturnJan)
summary(normTrain)
mean(normTrain$ReturnJan)
set.seed(144)
km = kmeans(normTrain, k=3)
km = kmeans(normTrain, centers=3)
table(km$cluster)
km$size
library(flexclust)
install.packages("flexclust")
library(flexclust)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata=normTest)
table(clusterTest)
stocksTrain1 = subset(stockTrain, clusterTrain == 1)
stocksTrain2 = subset(stockTrain, clusterTrain == 2)
stocksTrain3 = subset(stockTrain, clusterTrain == 3)
stocksTest1 = subset(stockTest, clusterTest == 1)
stocksTest2 = subset(stockTest, clusterTest == 2)
stocksTest3 = subset(stockTest, clusterTest == 3)
mean(stocksTrain1)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
stocksModel1 = glm(PositiveDec ~ ., data=stocksTrain1)
stocksModel2 = glm(PositiveDec ~ ., data=stocksTrain2)
stocksModel3 = glm(PositiveDec ~ ., data=stocksTrain3)
mean(stocksTest1$PositiveDec)
mean(stocksTest2$PositiveDec)
mean(stocksTest3$PositiveDec)
summary(stocksModel1)
summary(stocksModel2)
summary(stocksModel3)
summary(stocksModel1)
summary(stocksModel2)
summary(stocksModel3)
stocksModel1 = glm(PositiveDec ~ ., data=stocksTrain1, family=binomial)
stocksModel2 = glm(PositiveDec ~ ., data=stocksTrain2, family=binomial)
stocksModel3 = glm(PositiveDec ~ ., data=stocksTrain3, family=binomial)
predictTest1 = predict(stocksModel1, newdata=stocksTest1, type="response")
predictTest2 = predict(stocksModel2, newdata=stocksTest2, type="response")
predictTest3 = predict(stocksModel3, newdata=stocksTest1, type="response")
predictTest3 = predict(stocksModel3, newdata=stocksTest3, type="response")
table(stocksTest1, predictTest1 > 0.5)
table(stocksTest1$PositiveDec, predictTest1 > 0.5)
table1 = table(stocksTest1$PositiveDec, predictTest1 > 0.5)
table2 = table(stocksTest2$PositiveDec, predictTest3 > 0.5)
table2 = table(stocksTest2$PositiveDec, predictTest2 > 0.5)
table3 = table(stocksTest3$PositiveDec, predictTest3 > 0.5)
sum(diag(1,2)*table1)/sum(table1)
sum(diag(1,2)*table2)/sum(table2)
sum(diag(1,2)*table3)/sum(table3)
allPredictions = c(predictTest1, predictTest2, predictTest3)
allPredictions
nrow(allPredictions)
class(allPredictions)
allOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
table(allOutcomes, allPredictions > 0.5)
allTable = table(allOutcomes, allPredictions > 0.5)
sum(diag(1,2)*allTable)/sum(allTable)
setwd("~/Dev/The_Analytic_Edge/kaggle")
rm(list=ls())
NewsTrain = read.csv("NYTimesBlogTrain.csv", stringsAsFactors=FALSE)
NewsTest = read.csv("NYTimesBlogTest.csv", stringsAsFactors=FALSE)
SimpleMod = glm(Popular ~ WordCount, data=NewsTrain, family=binomial)
PredTest = predict(SimpleMod, newdata=NewsTest, type="response")
MySubmission = data.frame(UniqueID = NewsTest$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "SubmissionSimpleLog.csv", row.names=FALSE)
NewsTrain$Weekday = NewsTrain$PubDate$wday
NewsTest$Weekday = NewsTest$PubDate$wday
NewsTrain = read.csv("NYTimesBlogTrain.csv", stringsAsFactors=FALSE)
NewsTest = read.csv("NYTimesBlogTest.csv", stringsAsFactors=FALSE)
library(tm)
CorpusHeadline = Corpus(VectorSource(c(NewsTrain$Headline, NewsTest$Headline)))
CorpusHeadline = tm_map(CorpusHeadline, tolower)
CorpusHeadline = tm_map(CorpusHeadline, PlainTextDocument)
CorpusHeadline = tm_map(CorpusHeadline, removePunctuation)
CorpusHeadline = tm_map(CorpusHeadline, removeWords, stopwords("english"))
CorpusHeadline = tm_map(CorpusHeadline, stemDocument)
dtm = DocumentTermMatrix(CorpusHeadline)
sparse = removeSparseTerms(dtm, 0.99)
HeadlineWords = as.data.frame(as.matrix(sparse))
head(HeadlineWords)
colnames(HeadlineWords) = make.names(colnames(HeadlineWords))
names(HeadlineWords)
HeadlineWordsTrain = head(HeadlineWords, nrow(NewsTrain))
HeadlineWordsTest = tail(HeadlineWords, nrow(NewsTest))
HeadlineWordsTrain$Popular = NewsTrain$Popular
HeadlineWordsTrain$WordCount = NewsTrain$WordCount
HeadlineWordsTest$WordCount = NewsTest$WordCount
HeadlineWordsLog = glm(Popular ~ ., data=HeadlineWordsTrain, family=binomial)
PredTest = predict(HeadlineWordsLog, newdata=HeadlineWordsTest, type="response")
