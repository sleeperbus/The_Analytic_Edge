ilbrary(swirl)
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
is.na(myData)
myNa <- is.na(myData)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], xp5[, x[7]])
c(x[3], x[5][, x[7]])
c(x[3], x[5], x[7]])
c(x[3], x[5], x[7])
sqrt(c(x[3], x[5], x[7]))
info()
d
ds
c(3,5,7)
[c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo=11, bar = 2, norf = NA)
vect
names()
names(vect_)
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect2
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
View(myVector)
attributess(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix()
?matrix
myMatrix2 <- matrix(1:2)
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
?cbind
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myDa)
class(myData)
cnames <- c("patients", "aga", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
for (i in seq_along(1:10)) {}
for (i in seq_along(1:10)) {
print i
for (i in seq_along(1:10)) {
print i }
for (i in seq_along(1:10)) {
print i
}
for (i in seq_along(1:10)) {
print i
}
x <- c("a", "b", "c", "d")
for (i in 1:4) print x[i]
for (i in 1:4) print(x[i])
for (i in seq_along(x)) print(x[i])
for (letter in x) print(letter)
for (i in x) print(i)
x <- matrix(1:6, 2, 3)
for (j in seq_len(ncol(x
;
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print(x[i,j])
}
}
?sd
args(lm)
args(sd)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
cube(3)
square <- make.power(2)
square(3)
ls(enviroment(cube))
?environment
ls(environment(cube))
get("n", environment(cube))
environment(cube)
?ls
objects(cube)
objects(environment(cube))
?environment
x <- matrix(1:4, 2, 2)
y <- matrix(rep(10, 4), 2, 2)
y
x * y
x %*% y
swirl()
swirl()
cube <- function(x, n) {
X^3
}
X^3
}
cube <- function(x, n) {
X^3
}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if (x > 5) {
x <- 0
}
x > 5
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if (x < 3) {
NA
} else {
10
}
y
?numeric
?`<<-`
setwd("~/Dev/github/The_Analytic_Edge/Unit4")
claims = read.csv("ClaimsData.csv")
str(claims)
table(claims$bucket2009)/nrow(claims)
library(caTools)
set.seed(88)
split = sample.split(claims$bucket2009, SplitRatio=0.6)
train = subset(claims, split==T)
test = subset(claims, split==F)
train$bucket2008 = as.factor(train$bucket2008)
test$bucket2008 = as.factor(test$bucket2008)
train$bucket2009 = as.factor(train$bucket2009)
test$bucket2009 = as.factor(test$bucket2009)
# base line
sum(diag(1, 5) * table(test$bucket2009, test$bucket2008))/nrow(test)
penaltyMatrix  = matrix(c(0, 1, 2, 3, 4, 2, 0 , 1, 2, 3, 4, 2, 0, 1, 2, 6, 4, 2,
0, 1, 8, 6, 4, 2, 0), nrow=5, ncol=5, byrow=T)
sum(as.matrix(table(test$bucket2009, test$bucket2008)) * penaltyMatrix)/nrow(test)
# formula
library(rpart)
library(rpart.plot)
f = bucket2009 ~ age + alzheimers + arthritis + cancer + copd +
depression + diabetes + heart.failure + ihd + kidney +
osteoporosis + stroke + reimbursement2008 + bucket2008
tree.mod = rpart(f, data=train, method="class", cp=0.00005)
prp(tree.mod)
tree.pred = predict(tree.mod, newdata=test, type="class")
sum(diag(1, 5) * table(test$bucket2009, tree.pred))/nrow(test)
sum(table(test$bucket2009, tree.pred) * penaltyMatrix)/nrow(test)
?rpart
tree.mod2 = rpart(f, data=train, method="class", cp=0.00005, parms=list(loss=penaltyMatrix))
tree.pred2 = predict(tree.mod2, newdata=test, type="class")
sum(diag(1, 5) * table(test$bucket2009, tree.pred2))/nrow(test)
sum(table(test$bucket2009, tree.pred2) * penaltyMatrix)/nrow(test)
sum(diag(1, 5) * table(test$bucket2009, test$bucket2008))/nrow(test)
sum(as.matrix(table(test$bucket2009, test$bucket2008)) * penaltyMatrix)/nrow(test)
sum(diag(1, 5) * table(test$bucket2009, tree.pred2))/nrow(test)
sum(table(test$bucket2009, tree.pred2) * penaltyMatrix)/nrow(test)
rm(list=ls())
claims = read.csv("ClaimsData.csv")
rm(list=ls())
court = read.csv("stevens.csv")
str(court)
court$Unconst = as.factor(court$Unconst)
court$Reverse = as.factor(court$Reverse)
str(court)
form = Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt +
Unconst + Reverse
library(caTools)
split = sample.split(court$Reverse, SplitRatio=0.7)
train = subset(court, split==T)
test = subset(court, split==F)
table(test$Reverse)
set.seed(1000)
split = sample.split(court$Reverse, SplitRatio=0.7)
train = subset(court, split==T)
test = subset(court, split==F)
table(test$Reverse)
rm(list=ls())
court = read.csv("stevens.csv")
str(court)
court$Unconst = as.factor(court$Unconst)
court$Reverse = as.factor(court$Reverse)
form = Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt +
Unconst + Reverse
library(caTools)
set.seed(88)
split = sample.split(court$Reverse, SplitRatio=0.7)
train = subset(court, split==T)
test = subset(court, split==F)
table(test$Reverse)
prop.table(table(test$Reverse))
log.mod = glm(form, data=train, family="binomial")
form = Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt +
Unconst + Reverse
log.mod = glm(form, data=train, family="binomial")
form
names(train)
train
names(train)
form = Reverse ~ Circuit + Issue + Petitioner + Respondent +
LowerCourt + Unconst + Reverse
log.mod = glm(form, data=train, family="binomial")
log.mod = glm(form, data=train, family=binomial)
summary(log.mod)
log.mod = glm(form, data=train, family=binomial)
log.mod$fitted.values
set.seed(3000)
stevens = read.csv("stevens.csv")
str(stevens)
split = sample.split(stevens$Reverse, SplitRatio=0.7)
train = subset(stevens, split==T)
test = subset(stevens, split==F)
names(train)
form = Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt +
Unconst
log.mod = glm(form, data=train, family=binomial)
rm(list=ls())
court = read.csv("stevens.csv")
str(court)
court$Unconst = as.factor(court$Unconst)
court$Reverse = as.factor(court$Reverse)
form = Reverse ~ Circuit + Issue + Petitioner + Respondent +
LowerCourt + Unconst
library(caTools)
set.seed(88)
split = sample.split(court$Reverse, SplitRatio=0.7)
train = subset(court, split==T)
test = subset(court, split==F)
prop.table(table(test$Reverse))
summary(log.mod)
log.mod = glm(form, data=train, family=binomial)
summary(log.mod)
log.pred = predict(log.mod, newdata=test)
log.pred
boxplot(log.pred)
summary(log.pred)
log.pred = predict(log.mod, newdata=test, type="class")
log.pred = predict(log.mod, newdata=test, type="response")
log.pred
?predict
summary(log.pred)
library(ROCR)
log.rocr.pred = prediction(log.pred, test$Reverse)
?prediction
help(package=ROCR)
log.rocr.perf = performance(log.rocr.pred, "tpr", "fpr")
plot(log.rocr.perf)
plot(log.rocr.perf, color=T)
plot(log.rocr.perf, colorize=T)
plot(log.rocr.perf, colorize=T, print.cutoffs.at=seq(0,1,0.1))
plot(log.rocr.perf, colorize=T, print.cutoffs.at=seq(0,1,0.1),
test.adj=c(0, 1.7))
plot(log.rocr.perf, colorize=T, print.cutoffs.at=seq(0,1,0.1),
text.adj=c(0, 1.7))
table(test$Reverse, log.pred > 0.6)
as.matrix(table(test$Reverse, log.pred > 0.6))
diag(1, 2)
diag(1, 2) * as.matrix(table(test$Reverse, log.pred > 0.6))
table(test$Reverse, log.pred > 0.6)
(51+58)/(51+26+35+58)
prop.table(table(test$Reverse))
